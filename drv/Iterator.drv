/*
 * Copyright (C) 2002-2020 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package PACKAGE;

import java.util.Iterator;
#if KEYS_PRIMITIVE
import java.util.PrimitiveIterator;
#endif
#if (!defined JDK_PRIMITIVE_ITERATOR || KEY_WIDENED) && KEYS_PRIMITIVE
import java.util.Objects;
#endif
#ifdef KEYS_PRIMITIVE
import java.util.function.Consumer;
#endif

/** A type-specific {@link Iterator}; provides an additional method to avoid (un)boxing, and
 * the possibility to skip elements.
 *
 * @see Iterator
 */
#if defined JDK_PRIMITIVE_ITERATOR && !KEY_WIDENED
public interface KEY_ITERATOR KEY_GENERIC extends JDK_PRIMITIVE_ITERATOR {
#elif KEYS_PRIMITIVE
public interface KEY_ITERATOR KEY_GENERIC extends PrimitiveIterator<KEY_GENERIC_CLASS, KEY_CONSUMER> {
#else
public interface KEY_ITERATOR KEY_GENERIC extends Iterator<KEY_GENERIC_CLASS> {
#endif

#if KEYS_PRIMITIVE
	/**
	 * Returns the next element as a primitive type.
	 *
	 * @return the next element in the iteration.
	 * @see Iterator#next()
	 */
#if KEYS_INT_LONG_DOUBLE
	@Override
#endif
	KEY_TYPE NEXT_KEY();

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	default KEY_CLASS next() {
		return KEY_CLASS.valueOf(NEXT_KEY());
	}

#if KEYS_INT_LONG_DOUBLE
	// We inherit the canonical primitive forEachRemaining overload.

	// Because our primitive Consumer interface extends both the JDK's primitive
	// and object Consumer interfaces, calling this method with it would be ambiguous.
	// This overload exists to pass it to the proper primitive overload.
	/**
	 * Performs the given action for each remaining element until all elements
	 * have been processed or the action throws an exception.
	 *
	 * <p><b>WARNING</b>: Overriding this method is almost always a mistake, as this
	 * overload only exists to disambiguate. Instead, override the {@code forEachRemaining()} overload
	 * that uses the JDK's primitive consumer type (e.g. {@link java.util.function.IntConsumer}).
	 *
	 * <p>If Java supported final default methods, this would be one, but sadly it does not.
	 *
	 * <p>If you checked and are overriding the version with {@code java.util.function.XConsumer}, and
	 * still see this warning, then your IDE is incorrectly conflating this method with the proper
	 * method to override, and you can safely ignore this message.
	 *
	 * @param action the action to be performed for each element.
	 * @see java.util.Iterator#forEachRemaining(java.util.function.Consumer)
	 * @since 8.5.0
	 */
	default void forEachRemaining(final KEY_CONSUMER action) {
		forEachRemaining((JDK_PRIMITIVE_KEY_CONSUMER) action);
	}
#else
	/**
	 * Performs the given action for each remaining element until all elements
	 * have been processed or the action throws an exception.
	 *
	 * @param action the action to be performed for each element.
	 * @see java.util.Iterator#forEachRemaining(java.util.function.Consumer)
	 * @since 8.0.0
	 * @apiNote Implementing classes should generally override this method, and take the default
	 *   implementation of the other overloads which will delegate to this method (after proper
	 *   conversions).
	 */
	@Override
	default void forEachRemaining(final KEY_CONSUMER action) {
		Objects.requireNonNull(action);
		while (hasNext()) {
			action.accept(NEXT_KEY());
		}
	}

#if !KEY_CLASS_Boolean
	/**
	 * Performs the given action for each remaining element, performing widening primitive casts,
	 * until all elements have been processed or the action throws an exception.
	 * @param action the action to be performed for each element.
	 * @see java.util.Iterator#forEachRemaining(java.util.function.Consumer)
	 * @since 8.5.0
	 * @implNote Unless the argument is type-specific, this method will introduce an intermediary
	 *   lambda to perform widening casts. Please use the type-specific overload to avoid this overhead.
	 */
	default void forEachRemaining(final JDK_PRIMITIVE_KEY_CONSUMER action) {
		Objects.requireNonNull(action);
		forEachRemaining(action instanceof KEY_CONSUMER ? (KEY_CONSUMER)action : (KEY_CONSUMER)action::accept);
	}
#endif

#endif

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	default void forEachRemaining(final Consumer<? super KEY_GENERIC_CLASS> action) {
		// The instanceof and cast is required for performance. Without it, calls routed through this
		// overload using a primitive consumer would go through the slow lambda.
		forEachRemaining(action instanceof METHOD_ARG_KEY_CONSUMER ? (METHOD_ARG_KEY_CONSUMER)action : (KEY_CONSUMER) action::accept);
	}

#endif

	/** Skips the given number of elements.
	 *
	 * <p>The effect of this call is exactly the same as that of calling {@link #next()} for {@code n} times (possibly stopping if {@link #hasNext()} becomes false).
	 *
	 * @param n the number of elements to skip.
	 * @return the number of elements actually skipped.
	 * @see Iterator#next()
	 */

	default int skip(final int n) {
		if (n < 0) throw new IllegalArgumentException("Argument must be nonnegative: " + n);
		int i = n;
		while(i-- != 0 && hasNext()) NEXT_KEY();
		return n - i - 1;
	}
}
