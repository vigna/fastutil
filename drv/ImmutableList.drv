/*
 * Copyright (C) 2020 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package PACKAGE;

import java.util.Collection;
import java.util.RandomAccess;
import java.util.NoSuchElementException;
#if KEYS_REFERENCE
import java.lang.reflect.Array;
import java.util.function.Consumer;
import java.util.stream.Collector;
#endif

/** A type-specific array-based immutable list; provides some additional methods that use polymorphism to avoid (un)boxing.
 *
 * <p>Instances of this class are immutable
 * and (contrarily to mutable array-based list implementations) the backing array is not exposed.
 * Instances can be built using a variety of methods, but note that constructors using
 * an array will not make a defensive copy.
 *
 * <p>This class implements the bulk method {@code getElements()} using
 * high-performance system calls (e.g., {@link
 * System#arraycopy(Object,int,Object,int,int) System.arraycopy()}) instead of
 * expensive loops.
 */

public class IMMUTABLE_LIST KEY_GENERIC extends ABSTRACT_LIST KEY_GENERIC implements RandomAccess, Cloneable, java.io.Serializable {
	private static final long serialVersionUID = 0L;
	
	SUPPRESS_WARNINGS_KEY_UNCHECKED_RAWTYPES
	private static final IMMUTABLE_LIST EMPTY = new IMMUTABLE_LIST(ARRAYS.EMPTY_ARRAY);

#if KEYS_PRIMITIVE
#define _EMPTY_ARRAY ARRAYS.EMPTY_ARRAY
#else
	SUPPRESS_WARNINGS_KEY_UNCHECKED
	private static final KEY_GENERIC KEY_GENERIC_TYPE[] emptyArray() {
		return KEY_GENERIC_ARRAY_CAST ARRAYS.EMPTY_ARRAY;
	}
#define _EMPTY_ARRAY emptyArray()
#endif

	/** The backing array; all elements are part of this list. */
	private final KEY_GENERIC_TYPE a[];

	/** Creates a new immutable list using a given array.
	 *
	 * <p>Note that this constructor does not perform a defensive copy.
	 *
	 * @param a the array that will be used to back this immutable list.
	 */

	public IMMUTABLE_LIST(final KEY_GENERIC_TYPE a[]) {
		this.a = a;
	}

	/** Creates a new immutable list and fills it with a given collection.
	 *
	 * @param c a collection that will be used to fill the immutable list.
	 */

	public IMMUTABLE_LIST(final Collection<? extends KEY_GENERIC_CLASS> c) {
#if KEYS_PRIMITIVE
		this(c.isEmpty() ? _EMPTY_ARRAY : ITERATORS.unwrap( ITERATORS.AS_KEY_ITERATOR(c.iterator())));
#else
		this(c.isEmpty() ? _EMPTY_ARRAY : ITERATORS.unwrap(c.iterator()));
#endif
	}

	/** Creates a new immutable list and fills it with a given type-specific collection.
	 *
	 * @param c a type-specific collection that will be used to fill the immutable list.
	 */
	public IMMUTABLE_LIST(final COLLECTION KEY_EXTENDS_GENERIC c) {
		this(c.isEmpty() ? _EMPTY_ARRAY : ITERATORS.unwrap(c.iterator()));
	}

	/** Creates a new immutable list and fills it with a given type-specific list.
	 *
	 * @param l a type-specific list that will be used to fill the immutable list.
	 */
	SUPPRESS_WARNINGS_KEY_UNCHECKED
	public IMMUTABLE_LIST(final LIST KEY_EXTENDS_GENERIC l) {
		this(l.isEmpty() ? _EMPTY_ARRAY : KEY_GENERIC_ARRAY_CAST new KEY_TYPE[l.size()]);
		l.getElements(0, a, 0, l.size());
	}

	/** Creates a new immutable list and fills it with the elements of a given array.
	 *
	 * @param a an array whose elements will be used to fill the immutable list.
	 * @param offset the first element to use.
	 * @param length the number of elements to use.
	 */
	SUPPRESS_WARNINGS_KEY_UNCHECKED
	public IMMUTABLE_LIST(final KEY_GENERIC_TYPE a[], final int offset, final int length) {
		this(KEY_GENERIC_ARRAY_CAST new KEY_TYPE[length]);
		System.arraycopy(a, offset, this.a, 0, length);
	}

	/** Creates a new immutable list and fills it with the elements returned by a type-specific iterator..
	 *
	 * @param i a type-specific iterator whose returned elements will fill the immutable list.
	 */
	public IMMUTABLE_LIST(final KEY_ITERATOR KEY_EXTENDS_GENERIC i) {
		this(i.hasNext() ? ITERATORS.unwrap(i) : _EMPTY_ARRAY);
	}
	
	/**
	 * Returns an empty immutable list.
	 * @return an immutable list (possibly shared) that is empty.
	 */
	 SUPPRESS_WARNINGS_KEY_UNCHECKED
	 public static KEY_GENERIC IMMUTABLE_LIST KEY_GENERIC of() {
		return EMPTY;
	 }

	/** Creates an immutable list using a list of elements.
	 *
	 * <p>Note that this method does not perform a defensive copy.
	 *
	 * @param init a list of elements that will be used to initialize the list.
	 * @return a new immutable list containing the given elements.
	 */
	SAFE_VARARGS
	public static KEY_GENERIC IMMUTABLE_LIST KEY_GENERIC of(final KEY_GENERIC_TYPE... init) {
		return init.length == 0 ? of() : new IMMUTABLE_LIST KEY_GENERIC(init);
	}

#if KEYS_INT_LONG_DOUBLE || KEYS_REFERENCE
	private static KEY_GENERIC IMMUTABLE_LIST KEY_GENERIC convertTrustedToImmutableList(ARRAY_LIST KEY_GENERIC arrayList) {
		if (arrayList.isEmpty()) {
			return of();
		}
		KEY_GENERIC_TYPE backingArray[] = arrayList.elements();
		if (arrayList.size() != backingArray.length) {
			backingArray = java.util.Arrays.copyOf(backingArray, arrayList.size());
		}
		return new IMMUTABLE_LIST KEY_GENERIC_DIAMOND (backingArray);
  }
#endif

#if KEYS_INT_LONG_DOUBLE
	/** Collects the result of a primitive {@code Stream} into a new ImmutableList.
	 *
	 * <p>This method performs a terminal operation on the given {@code Stream}
	 *
	 * @apiNote Taking a primitive stream instead of returning something like a
	 * {@link java.util.stream.Collector Collector} is necessary because there is no
	 * primitive {@code Collector} equivalent in the Java API.
	 */
	public static KEY_GENERIC IMMUTABLE_LIST KEY_GENERIC toList(JDK_PRIMITIVE_STREAM stream) {
		return convertTrustedToImmutableList(ARRAY_LIST.toList(stream));
	}

	/** Collects the result of a primitive {@code Stream} into a new ImmutableList.
	 *
	 * <p>This method performs a terminal operation on the given {@code Stream}
	 *
	 * @apiNote Taking a primitive stream instead returning something like a
	 * {@link java.util.stream.Collector Collector} is necessary because there is no
	 * primitive {@code Collector} equivalent in the Java API.
	 */
	public static KEY_GENERIC IMMUTABLE_LIST KEY_GENERIC toListWithExpectedSize(JDK_PRIMITIVE_STREAM stream, int expectedSize) {
		return convertTrustedToImmutableList(ARRAY_LIST.toListWithExpectedSize(stream, expectedSize));
	}
#elif KEYS_REFERENCE
	private static final Collector<KEY_TYPE, ?, IMMUTABLE_LIST<KEY_TYPE>> TO_LIST_COLLECTOR =
		Collector.of(
			ARRAY_LIST::new,
			ARRAY_LIST::add,
			ARRAY_LIST::combine,
			IMMUTABLE_LIST::convertTrustedToImmutableList);

	/** Returns a {@link Collector} that collects a {@code Stream}'s elements into a new ImmutableList. */
	SUPPRESS_WARNINGS_KEY_UNCHECKED_RAWTYPES
	public static KEY_GENERIC Collector<KEY_GENERIC_TYPE, ?, IMMUTABLE_LIST KEY_GENERIC> toList() {
		return (Collector) TO_LIST_COLLECTOR;
	}

 	/** Returns a {@link Collector} that collects a {@code Stream}'s elements into a new ImmutableList. */
 	public static KEY_GENERIC Collector<KEY_GENERIC_TYPE, ?, IMMUTABLE_LIST KEY_GENERIC> toListWithExpectedSize(int expectedSize) {
 		return Collector.<KEY_GENERIC_TYPE, ARRAY_LIST KEY_GENERIC, IMMUTABLE_LIST KEY_GENERIC>of(
			() -> new ARRAY_LIST KEY_GENERIC_DIAMOND(expectedSize),
			ARRAY_LIST::add,
			ARRAY_LIST::combine,
			IMMUTABLE_LIST::convertTrustedToImmutableList);
	}
#endif

	@Override
	public KEY_GENERIC_TYPE GET_KEY(final int index) {
		if (index >= a.length) throw new IndexOutOfBoundsException("Index (" + index + ") is greater than or equal to list size (" + a.length + ")");
		return a[index];
	}

	@Override
	public int indexOf(final KEY_TYPE k) {
		for(int i = 0, size = a.length; i < size; i++) if (KEY_EQUALS(k, a[i])) return i;
		return -1;
	}


	@Override
	public int lastIndexOf(final KEY_TYPE k) {
		for(int i = a.length; i-- != 0;) if (KEY_EQUALS(k, a[i])) return i;
		return -1;
	}

	@Override
	public int size() {
		return a.length;
	}

	@Override
	public boolean isEmpty() {
		return a.length == 0;
	}

   	/** Copies element of this type-specific list into the given array using optimized system calls.
	 *
	 * @param from the start index (inclusive).
	 * @param a the destination array.
	 * @param offset the offset into the destination array where to store the first element copied.
	 * @param length the number of elements to be copied.
	 */
	@Override
	public void getElements(final int from, final KEY_TYPE[] a, final int offset, final int length) {
		ARRAYS.ensureOffsetLength(a, offset, length);
		System.arraycopy(this.a, from, a, offset, length);
	}

	@Override
	public void forEach(final METHOD_ARG_KEY_CONSUMER action) {
		for (int i = 0; i < a.length; ++i) {
			action.accept(a[i]);
		}
	}

#if KEYS_PRIMITIVE
	@Override
	public KEY_TYPE[] TO_KEY_ARRAY() {
		return a.clone();
	}

	@Override
	public KEY_TYPE[] toArray(KEY_TYPE a[]) {
		if (a == null || a.length < size()) a = new KEY_TYPE[this.a.length];
		System.arraycopy(this.a, 0, a, 0, a.length);
		return a;
	}
#else // KEYS_REFERENCE
	@Override
	public Object[] toArray() {
		// A subtle part of the spec says the returned array must be Object[] exactly.
		if (a.getClass().equals(Object[].class)) {
			return a.clone();
		}
		return java.util.Arrays.copyOf(a, a.length, Object[].class);
	}

	SUPPRESS_WARNINGS_KEY_UNCHECKED
	@Override
	public KEY_GENERIC KEY_GENERIC_TYPE[] toArray(KEY_GENERIC_TYPE a[]) {
		if (a == null) {
			a = KEY_GENERIC_ARRAY_CAST new Object[size()];
		} else if (a.length < size()) {
			a = KEY_GENERIC_ARRAY_CAST Array.newInstance(a.getClass().getComponentType(), size());
		}
		System.arraycopy(this.a, 0, a, 0, size());
		if (a.length > size()) {
			a[size()] = null;
		}
		return a;
	}
#endif

	@Override
	public KEY_LIST_ITERATOR KEY_GENERIC listIterator(final int index) {
		ensureIndex(index);

		return new KEY_LIST_ITERATOR KEY_GENERIC() {
				int pos = index;

				@Override
				public boolean hasNext() { return pos < a.length; }
				@Override
				public boolean hasPrevious() { return pos > 0; }
				@Override
				public KEY_GENERIC_TYPE NEXT_KEY() { if (! hasNext()) throw new NoSuchElementException(); return a[pos++]; }
				@Override
				public KEY_GENERIC_TYPE PREV_KEY() { if (! hasPrevious()) throw new NoSuchElementException(); return a[--pos]; }
				@Override
				public int nextIndex() { return pos; }
				@Override
				public int previousIndex() { return pos - 1; }
				@Override
				public void forEachRemaining(final METHOD_ARG_KEY_CONSUMER action) {
					while (pos < a.length) {
						action.accept(a[pos++]);
					}
				}
				@Override
				public void add(KEY_GENERIC_TYPE k) {
					throw new UnsupportedOperationException();
				}
				@Override
				public void set(KEY_GENERIC_TYPE k) {
					throw new UnsupportedOperationException();
				}
				@Override
				public void remove() {
					throw new UnsupportedOperationException();
				}
				@Override
				public int back(int n) {
					if (n < 0) throw new IllegalArgumentException("Argument must be nonnegative: " + n);
					final int remaining = a.length - pos;
					if (n < remaining) {
						pos -= n;
					} else {
						n = remaining;
						pos = 0;
					}
					return n;
				}
				@Override
				public int skip(int n) {
					if (n < 0) throw new IllegalArgumentException("Argument must be nonnegative: " + n);
					final int remaining = a.length - pos;
					if (n < remaining) {
						pos += n;
					} else {
						n = remaining;
						pos = a.length;
					}
					return n;
				}
			};
	}

  private final class Spliterator implements KEY_SPLITERATOR KEY_GENERIC {
		int pos, max;

#ifdef TEST
		// Sentinel to make sure we don't accidentally use size when we mean max
		@Deprecated
		private final Object size = null;
#endif

		public Spliterator() {
			this(0, a.length);
		}

		private Spliterator(int pos, int max) {
			assert pos <= max : "pos " + pos + " must be <= max " + max;
			this.pos = pos;
			this.max = max;
		}

		@Override
		public int characteristics() { return SPLITERATORS.LIST_SPLITERATOR_CHARACTERISTICS | java.util.Spliterator.IMMUTABLE; }

		@Override
		public long estimateSize() { return max - pos; }

		@Override
		public boolean tryAdvance(final METHOD_ARG_KEY_CONSUMER action) {
			if (pos >= max) return false;
			action.accept(a[pos++]);
			return true;
		}

		@Override
		public void forEachRemaining(final METHOD_ARG_KEY_CONSUMER action) {
			for (; pos < max; ++pos) {
				action.accept(a[pos]);
			}
		}

		@Override
		public long skip(long n) {
			if (n < 0) throw new IllegalArgumentException("Argument must be nonnegative: " + n);
			if (pos >= max) return 0;
			final int remaining = max - pos;
			if (n < remaining) {
				pos = it.unimi.dsi.fastutil.SafeMath.safeLongToInt(pos + n);
				return n;
			}
			n = remaining;
			pos = max;
			return n;
		}

		@Override
		public KEY_SPLITERATOR KEY_GENERIC trySplit() {
			int retLen = (max - pos) >> 1;
			if (retLen <= 1) return null;
			int myNewPos = pos + retLen;
			int retMax = myNewPos;
			int oldPos = pos;
			this.pos = myNewPos;
			return new Spliterator(oldPos, retMax);
		}
	}

	@Override
	public KEY_SPLITERATOR KEY_GENERIC spliterator() {
		return new Spliterator();
	}

	@Override
	public IMMUTABLE_LIST KEY_GENERIC clone() {
		return this;
	}

	/** Compares this type-specific immutable list to another one.
	 *
	 * <p>This method exists only for sake of efficiency. The implementation
	 * inherited from the abstract implementation would already work.
	 *
	 * @param l a type-specific immutable list.
	 * @return true if the argument contains the same elements of this type-specific immutable list.
	 */
	public boolean equals(final IMMUTABLE_LIST KEY_GENERIC l) {
		if (l == this) return true;
		int s = size();
		if (s != l.size()) return false;
		final KEY_GENERIC_TYPE[] a1 = a;
		final KEY_GENERIC_TYPE[] a2 = l.a;

#if KEY_CLASS_Reference
		while(s-- !=  0) if (a1[s] != a2[s]) return false;
#else
		java.util.Arrays.equals(a1, a2);
#endif
		return true;
	}

	SUPPRESS_WARNINGS_KEY_UNCHECKED
	@Override
	public boolean equals(final Object o) {
		return o instanceof IMMUTABLE_LIST ? equals((IMMUTABLE_LIST KEY_GENERIC) o) : super.equals(o);
	}


#if ! KEY_CLASS_Reference

	/** Compares this immutable list to another immutable list.
	 *
	 * <p>This method exists only for sake of efficiency. The implementation
	 * inherited from the abstract implementation would already work.
	 *
	 * @param l an immutable list.
	 * @return a negative integer,
	 * zero, or a positive integer as this list is lexicographically less than, equal
	 * to, or greater than the argument.
	 */
	SUPPRESS_WARNINGS_KEY_UNCHECKED
	public int compareTo(final IMMUTABLE_LIST KEY_EXTENDS_GENERIC l) {
		// TODO When minimum version of Java becomes Java 9, use Arrays.compare, which vectorizes.
		final int s1 = size(), s2 = l.size();
		final KEY_GENERIC_TYPE a1[] = a, a2[] = l.a;
		KEY_GENERIC_TYPE e1, e2;
		int r, i;

		for(i = 0; i < s1 && i < s2; i++) {
			e1 = a1[i];
			e2 = a2[i];
			if ((r = KEY_CMP(e1, e2)) != 0) return r;
		}

		return i < s2 ? -1 : (i < s1 ? 1 : 0);
	}

	SUPPRESS_WARNINGS_KEY_UNCHECKED
	@Override
	public int compareTo(final java.util.List <? extends KEY_GENERIC_CLASS> l) {
		return l instanceof IMMUTABLE_LIST ? compareTo((IMMUTABLE_LIST KEY_EXTENDS_GENERIC)l) : super.compareTo(l);
	}
#endif

	// Overridden mutation methods to make unsupported.

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final void add(final int index, final KEY_GENERIC_TYPE k) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean add(final KEY_GENERIC_TYPE k) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean addAll(final java.util.Collection<? extends KEY_GENERIC_CLASS> c) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean addAll(int index, final java.util.Collection<? extends KEY_GENERIC_CLASS> c) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final KEY_GENERIC_TYPE REMOVE_KEY(final int index) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean REMOVE(final KEY_TYPE k) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean removeAll(final java.util.Collection<?> c) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean retainAll(final java.util.Collection<?> c) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean removeIf(final java.util.function.Predicate<? super KEY_GENERIC_CLASS> c) {
		throw new UnsupportedOperationException();
	}

#if KEYS_PRIMITIVE
	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean removeIf(final METHOD_ARG_PREDICATE c) {
		throw new UnsupportedOperationException();
	}
#endif

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final void replaceAll(final java.util.function.UnaryOperator<KEY_GENERIC_CLASS> operator) {
		throw new UnsupportedOperationException();
	}	

#if KEYS_PRIMITIVE && ! KEY_CLASS_Boolean
	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final void REPLACE_ALL_KEY(final JDK_PRIMITIVE_UNARY_OPERATOR operator) {
		throw new UnsupportedOperationException();
	}
#endif

#if KEYS_PRIMITIVE
	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final void add(final int index, final KEY_GENERIC_CLASS k) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean add(final KEY_GENERIC_CLASS k) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final KEY_GENERIC_CLASS remove(final int index) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean remove(final Object k) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final KEY_GENERIC_CLASS set(final int index, final KEY_GENERIC_CLASS k) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean addAll(final COLLECTION c) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean addAll(final LIST c) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean addAll(final int index, final COLLECTION c) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean addAll(final int index, final LIST c) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean removeAll(final COLLECTION c) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final boolean retainAll(final COLLECTION c) {
		throw new UnsupportedOperationException();
	}
#endif

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final KEY_GENERIC_TYPE set(final int index, final KEY_GENERIC_TYPE k) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final void clear() {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final void size(final int size) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final void removeElements(final int from, final int to) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final void addElements(final int index, final KEY_GENERIC_TYPE a[], final int offset, final int length) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final void setElements(final int index, final KEY_GENERIC_TYPE a[], final int offset, final int length) {
		throw new UnsupportedOperationException();
	}

#if KEYS_PRIMITIVE
	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final void sort(final KEY_COMPARATOR KEY_SUPER_GENERIC comp) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final void unstableSort(final KEY_COMPARATOR KEY_SUPER_GENERIC comp) {
		throw new UnsupportedOperationException();
	}
#endif

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final void sort(final java.util.Comparator<? super KEY_GENERIC_CLASS> comparator) {
		throw new UnsupportedOperationException();
	}

	/**
	 * @implSpec Always throws {@link UnsupportedOperationException} as this is an immutable type.
	 *
	 * @deprecated
	 */
	@Override
	@Deprecated
	public final void unstableSort(final java.util.Comparator<? super KEY_GENERIC_CLASS> comparator) {
		throw new UnsupportedOperationException();
	}
}

#undef _EMPTY_ARRAY