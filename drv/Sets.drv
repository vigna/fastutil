/*
 * Copyright (C) 2002-2020 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package PACKAGE;

import java.util.Collection;
import java.util.Set;
import java.util.function.Consumer;
#if KEYS_BYTE_CHAR_SHORT_FLOAT
import WIDENED_PACKAGE.KEY_WIDENED_ITERATOR;
import WIDENED_PACKAGE.WIDENED_ITERATORS;
import WIDENED_PACKAGE.KEY_WIDENED_SPLITERATOR;
import WIDENED_PACKAGE.WIDENED_SPLITERATORS;
#endif

/** A class providing static methods and objects that do useful things with type-specific sets.
 *
 * @see java.util.Collections
 */

public final class SETS {

	private SETS() {}

	/** The maximum size to choose ArraySet over OpenHashSet for utilites that automatically choose. */
	static final int ARRAY_SET_CUTOFF = 4;

	/** An immutable class representing the empty set and implementing a type-specific set interface.
	 *
	 * <p>This class may be useful to implement your own in case you subclass
	 * a type-specific set.
	 */

	public static class EmptySet KEY_GENERIC extends COLLECTIONS.EmptyCollection KEY_GENERIC implements SET KEY_GENERIC, java.io.Serializable, Cloneable {
		private static final long serialVersionUID = -7046029254386353129L;

		protected EmptySet() {}

		@Override
		public boolean remove(KEY_TYPE ok) { throw new UnsupportedOperationException(); }

		@Override
		public Object clone() { return EMPTY_SET; }

		@Override
		@SuppressWarnings("rawtypes")
		public boolean equals(final Object o) { return o instanceof Set && ((Set)o).isEmpty(); }

#if KEYS_PRIMITIVE
		@Deprecated
		@Override
		public boolean rem(final KEY_TYPE k) { return super.rem(k); }
#endif

		private Object readResolve() { return EMPTY_SET; }
	}


	/** An empty set (immutable). It is serializable and cloneable.
	 */
	SUPPRESS_WARNINGS_KEY_RAWTYPES
	public static final EmptySet EMPTY_SET = new EmptySet();
	
	// Used by Sets.of() instead of SETS.EMPTY_SET to make a dimorphic call site.
	// See https://github.com/vigna/fastutil/issues/183
	SUPPRESS_WARNINGS_KEY_UNCHECKED_RAWTYPES
	static final SET UNMODIFIABLE_EMPTY_SET = SETS.unmodifiable(new ARRAY_SET(ARRAYS.EMPTY_ARRAY));

	/** Returns an empty set (immutable). It is serializable and cloneable.
	 *
	 * <p>This method provides a typesafe access to {@link #EMPTY_SET}.
	 * @return an empty set (immutable).
	 */
	@SuppressWarnings("unchecked")
	public static KEY_GENERIC SET KEY_GENERIC emptySet() {
		return EMPTY_SET;
	}

	/** An immutable class representing a type-specific singleton set.
	 *
	 * <p>This class may be useful to implement your own in case you subclass
	 * a type-specific set.
	 */

	public static class Singleton KEY_GENERIC extends ABSTRACT_SET KEY_GENERIC implements java.io.Serializable, Cloneable {

		private static final long serialVersionUID = -7046029254386353129L;

		protected final KEY_GENERIC_TYPE element;

		protected Singleton(final KEY_GENERIC_TYPE element) {
			this.element = element;
		}

		@Override
		public boolean contains(final KEY_TYPE k) { return KEY_EQUALS(k, element); }

		@Override
		public boolean remove(final KEY_TYPE k) { throw new UnsupportedOperationException(); }

		@Override
		public KEY_LIST_ITERATOR KEY_GENERIC iterator() { return ITERATORS.singleton(element); }

		@Override
		public KEY_SPLITERATOR KEY_GENERIC spliterator() { return SPLITERATORS.singleton(element); }

		@Override
		public int size() { return 1; }

		@Override
		public KEY_TYPE[] TO_KEY_ARRAY() { return new KEY_TYPE[]{element}; }

		DEPRECATED_IF_KEYS_PRIMITIVE
		@Override
		public void forEach(final Consumer<? super KEY_GENERIC_CLASS> action) { action.accept(KEY2OBJ(element)); }

		@Override
		public boolean addAll(final Collection<? extends KEY_GENERIC_CLASS> c) { throw new UnsupportedOperationException(); }

		@Override
		public boolean removeAll(final Collection<?> c) { throw new UnsupportedOperationException(); }

		@Override
		public boolean retainAll(final Collection<?> c) { throw new UnsupportedOperationException(); }

#if KEYS_PRIMITIVE
		@Deprecated
#endif
		@Override
		public boolean removeIf(final java.util.function.Predicate<? super KEY_GENERIC_CLASS> filter) { throw new UnsupportedOperationException(); }

#if KEYS_PRIMITIVE

		@Override
		public void forEach(final METHOD_ARG_KEY_CONSUMER action) {	action.accept(element); }

		@Override
		public boolean addAll(final COLLECTION c) { throw new UnsupportedOperationException(); }

		@Override
		public boolean removeAll(final COLLECTION c) { throw new UnsupportedOperationException(); }

		@Override
		public boolean retainAll(final COLLECTION c) { throw new UnsupportedOperationException(); }

		@Override
		public boolean removeIf(final METHOD_ARG_PREDICATE filter) { throw new UnsupportedOperationException(); }

#if KEYS_BYTE_CHAR_SHORT_FLOAT
		@Override
		public KEY_WIDENED_ITERATOR KEY_WIDENED_ITERATOR_METHOD() { return WIDENED_ITERATORS.singleton(element); }

		@Override
		public KEY_WIDENED_SPLITERATOR KEY_WIDENED_SPLITERATOR_METHOD() { return WIDENED_SPLITERATORS.singleton(element); }
#endif

		@Deprecated
		@Override
		public Object[] toArray() { return new Object[]{ KEY2OBJ(element) }; }


#endif
		@Override
		public Object clone() { return this; }
	}

	/** Returns a type-specific immutable set containing only the specified element. The returned set is serializable and cloneable.
	 *
	 * @param element the only element of the returned set.
	 * @return a type-specific immutable set containing just {@code element}.
	 */

	public static KEY_GENERIC SET KEY_GENERIC singleton(final KEY_GENERIC_TYPE element) {
		return new Singleton KEY_GENERIC_DIAMOND(element);
	}

#if KEYS_PRIMITIVE

	/** Returns a type-specific immutable set containing only the specified element. The returned set is serializable and cloneable.
	 *
	 * @param element the only element of the returned set.
	 * @return a type-specific immutable set containing just {@code element}.
	 */

	public static KEY_GENERIC SET KEY_GENERIC singleton(final KEY_GENERIC_CLASS element) {
		return new Singleton KEY_GENERIC_DIAMOND(KEY_CLASS2TYPE(element));
	}

#endif

	/** A synchronized wrapper class for sets. */

	public static class SynchronizedSet KEY_GENERIC extends COLLECTIONS.SynchronizedCollection KEY_GENERIC implements SET KEY_GENERIC, java.io.Serializable {

		private static final long serialVersionUID = -7046029254386353129L;

		protected SynchronizedSet(final SET KEY_GENERIC s, final Object sync) {
			super(s, sync);
		}

		protected SynchronizedSet(final SET KEY_GENERIC s) {
			super(s);
		}

		@Override
		public boolean remove(final KEY_TYPE k) { synchronized(sync) { return collection.REMOVE(k); } }

#if KEYS_PRIMITIVE
		@Deprecated
		@Override
		public boolean rem(final KEY_TYPE k) { return super.rem(k); }
#endif
	}


	/** Returns a synchronized type-specific set backed by the given type-specific set.
	 *
	 * @param s the set to be wrapped in a synchronized set.
	 * @return a synchronized view of the specified set.
	 * @see java.util.Collections#synchronizedSet(Set)
	 */
	public static KEY_GENERIC SET KEY_GENERIC synchronize(final SET KEY_GENERIC s) {	return new SynchronizedSet KEY_GENERIC_DIAMOND(s); }

	/** Returns a synchronized type-specific set backed by the given type-specific set, using an assigned object to synchronize.
	 *
	 * @param s the set to be wrapped in a synchronized set.
	 * @param sync an object that will be used to synchronize the access to the set.
	 * @return a synchronized view of the specified set.
	 * @see java.util.Collections#synchronizedSet(Set)
	 */

	public static KEY_GENERIC SET KEY_GENERIC synchronize(final SET KEY_GENERIC s, final Object sync) { return new SynchronizedSet KEY_GENERIC_DIAMOND(s, sync); }



	/** An unmodifiable wrapper class for sets. */

	public static class UnmodifiableSet KEY_GENERIC extends COLLECTIONS.UnmodifiableCollection KEY_GENERIC implements SET KEY_GENERIC, java.io.Serializable {

		private static final long serialVersionUID = -7046029254386353129L;

		protected UnmodifiableSet(final SET KEY_GENERIC s) {
			super(s);
		}

		@Override
		public boolean remove(final KEY_TYPE k) { throw new UnsupportedOperationException(); }

		@Override
		public boolean equals(final Object o) { if (o == this) return true; return collection.equals(o); }

		@Override
		public int hashCode() { return collection.hashCode(); }

#if KEYS_PRIMITIVE
		@Deprecated
		@Override
		public boolean rem(final KEY_TYPE k) { return super.rem(k); }
#endif
	}


	/** Returns an unmodifiable type-specific set backed by the given type-specific set.
	 *
	 * @param s the set to be wrapped in an unmodifiable set.
	 * @return an unmodifiable view of the specified set.
	 * @see java.util.Collections#unmodifiableSet(Set)
	 */
	public static KEY_GENERIC SET KEY_GENERIC unmodifiable(final SET KEY_GENERIC s) {	return new UnmodifiableSet KEY_GENERIC_DIAMOND(s); }


#if KEY_CLASS_Byte || KEY_CLASS_Character || KEY_CLASS_Short || KEY_CLASS_Integer || KEY_CLASS_Long

	/** Returns an unmodifiable type-specific set containing elements in the given range.
	 *
	 * @param from the starting element (lower bound) of the set (inclusive).
	 * @param to the ending element (upper bound) of the set (exclusive).
	 * @return an unmodifiable set containing the elements in the given range.
	 */
	public static SET fromTo(final KEY_TYPE from, final KEY_TYPE to) {
		return new ABSTRACT_SET() {
			@Override
			public boolean contains(final KEY_TYPE x) {
				return x >= from && x < to;
			}
		
			@Override
			public KEY_ITERATOR iterator() {
				return ITERATORS.fromTo(from, to);
			}
		
			@Override
			public int size() {
#if KEY_CLASS_Long
				final long size = to - from;
#else
				final long size = (long)to - (long)from;
#endif
				return size >= 0 && size <= Integer.MAX_VALUE ? (int)size : Integer.MAX_VALUE;
			}
		};
	}

	/** Returns an unmodifiable type-specific set containing elements greater than or equal to a given element.
	 *
	 * @param from the starting element (lower bound) of the set (inclusive).
	 * @return an unmodifiable set containing the elements greater than or equal to {@code from}.
	 */
	public static SET from(final KEY_TYPE from) {
		return new ABSTRACT_SET() {
			@Override
			public boolean contains(final KEY_TYPE x) {
				return x >= from;
			}
		
			@Override
			public KEY_ITERATOR iterator() {
				return ITERATORS.concat(new KEY_ITERATOR[] { ITERATORS.fromTo(from, KEY_CLASS.MAX_VALUE), SETS.singleton(KEY_CLASS.MAX_VALUE).iterator() });
			}
		
			@Override
			public int size() {
#if KEY_CLASS_Long
				final long size = Long.MAX_VALUE - from + 1;
#else
				final long size = KEY_CLASS.MAX_VALUE - (long)from + 1;
#endif
				return size >= 0 && size <= Integer.MAX_VALUE ? (int)size : Integer.MAX_VALUE;
			}
		};
	}

	/** Returns an unmodifiable type-specific set containing elements smaller than a given element.
	 *
	 * @param to the ending element (upper bound) of the set (exclusive).
	 * @return an unmodifiable set containing the elements smaller than {@code to}.
	 */
	public static SET to(final KEY_TYPE to) {
		return new ABSTRACT_SET() {
			@Override
			public boolean contains(final KEY_TYPE x) {
				return x < to;
			}
		
			@Override
			public KEY_ITERATOR iterator() {
				return ITERATORS.fromTo(KEY_CLASS.MIN_VALUE, to);
			}
		
			@Override
			public int size() {
#if KEY_CLASS_Long
				final long size = to - Long.MIN_VALUE;
#else
				final long size = (long)to - KEY_CLASS.MIN_VALUE;
#endif
				return size >= 0 && size <= Integer.MAX_VALUE ? (int)size : Integer.MAX_VALUE;
			}
		};
	}

#endif

#ifdef TEST

	private static KEY_TYPE genKey() {
#if KEY_CLASS_Byte || KEY_CLASS_Short || KEY_CLASS_Character
		return (KEY_TYPE)(r.nextInt());
#elif KEYS_PRIMITIVE
		return r.NEXT_KEY();
#elif KEY_CLASS_Object
		return Integer.toBinaryString(r.nextInt());
#else
		return new java.io.Serializable() {};
#endif
	}


	private static void test() throws Exception{
		int n = 100;
		int c;
		KEY_TYPE k = genKey();
		Singleton m = new Singleton(k);
		Set t = java.util.Collections.singleton(KEY2OBJ(k));

		long ms;
		boolean mThrowsIllegal, tThrowsIllegal, mThrowsNoElement, tThrowsNoElement, mThrowsIndex, tThrowsIndex, mThrowsUnsupp, tThrowsUnsupp;
		boolean rt = false, rm = false;


		/* Now we check that m and t are equal. */
		if (!m.equals(t) || ! t.equals(m)) System.err.println("m: " + m + " t: " + t);

		ensure(m.equals(t), "Error (" + seed + "): ! m.equals(t) at start");
		ensure(t.equals(m), "Error (" + seed + "): ! t.equals(m) at start");

		/* Now we check that m actually holds that data. */
		for(java.util.Iterator i=t.iterator(); i.hasNext();) {
			ensure(m.contains(i.next()), "Error (" + seed + "): m and t differ on an entry after insertion (iterating on t)");
		}

		/* Now we check that m actually holds that data, but iterating on m. */
		for(java.util.Iterator i=m.iterator(); i.hasNext();) {
			ensure(t.contains(i.next()), "Error (" + seed + "): m and t differ on an entry after insertion (iterating on m)");
		}

		/* Now we check that inquiries about random data give the same answer in m and t. For
		   m we use the polymorphic method. */

		for(int i=0; i<n;  i++) {
			KEY_TYPE T = genKey();

			mThrowsIndex = tThrowsIndex = mThrowsNoElement = tThrowsNoElement = mThrowsIllegal = tThrowsIllegal = mThrowsUnsupp = tThrowsUnsupp = false;

			try {
				m.contains(T);
			}
			catch (java.util.NoSuchElementException e) { mThrowsNoElement = true; }
			catch (IllegalArgumentException e) { mThrowsIllegal = true; }
			catch (IndexOutOfBoundsException e) { mThrowsIndex = true; }

			try {
				t.contains(KEY2OBJ(T));
			}
			catch (java.util.NoSuchElementException e) { tThrowsNoElement = true; }
			catch (IllegalArgumentException e) { tThrowsIllegal = true; }
			catch (IndexOutOfBoundsException e) { tThrowsIndex = true; }

			ensure(mThrowsNoElement == tThrowsNoElement, "Error (" + seed + "): contains() divergence in java.util.NoSuchElementException for " + T + " (" + mThrowsNoElement + ", " + tThrowsNoElement + ") " + m);
			ensure(mThrowsIllegal == tThrowsIllegal, "Error (" + seed + "): contains() divergence in IllegalArgumentException for " + T + " (" + mThrowsIllegal + ", " + tThrowsIllegal + ") " + m);
			ensure(mThrowsIndex == tThrowsIndex, "Error (" + seed + "): contains() divergence in IndexOutOfBoundsException for " + T + " (" + mThrowsIndex + ", " + tThrowsIndex + ") " + m);
			if (!mThrowsNoElement && !mThrowsIllegal && !mThrowsIndex) ensure(m.contains(KEY2OBJ(T)) == t.contains(KEY2OBJ(T)), "Error (" + seed + "): divergence in keys between t and m (polymorphic method) " + m);
		}

		/* Again, we check that inquiries about random data give the same answer in m and t, but
		   for m we use the standard method. */

		for(int i=0; i<n;  i++) {
			KEY_TYPE T = genKey();

			mThrowsIndex = tThrowsIndex = mThrowsNoElement = tThrowsNoElement = mThrowsIllegal = tThrowsIllegal = mThrowsUnsupp = tThrowsUnsupp = false;

			try {
				m.contains(KEY2OBJ(T));
			}
			catch (java.util.NoSuchElementException e) { mThrowsNoElement = true; }
			catch (IllegalArgumentException e) { mThrowsIllegal = true; }
			catch (IndexOutOfBoundsException e) { mThrowsIndex = true; }
			catch (UnsupportedOperationException e) { mThrowsUnsupp = true; }

			try {
				t.contains(KEY2OBJ(T));
			}
			catch (java.util.NoSuchElementException e) { tThrowsNoElement = true; }
			catch (IllegalArgumentException e) { tThrowsIllegal = true; }
			catch (IndexOutOfBoundsException e) { tThrowsIndex = true; }
			catch (UnsupportedOperationException e) { tThrowsUnsupp = true; }

			ensure(mThrowsNoElement == tThrowsNoElement, "Error (" + seed + "): contains() divergence in java.util.NoSuchElementException for " + T + " (" + mThrowsNoElement + ", " + tThrowsNoElement + ") " + m);
			ensure(mThrowsIllegal == tThrowsIllegal, "Error (" + seed + "): contains() divergence in IllegalArgumentException for " + T + " (" + mThrowsIllegal + ", " + tThrowsIllegal + ") " + m);
			ensure(mThrowsIndex == tThrowsIndex, "Error (" + seed + "): contains() divergence in IndexOutOfBoundsException for " + T + " (" + mThrowsIndex + ", " + tThrowsIndex + ") " + m);
			ensure(mThrowsUnsupp == tThrowsUnsupp, "Error (" + seed + "): contains() divergence in UnsupportedOperationException for " + T + " (" + mThrowsUnsupp + ", " + tThrowsUnsupp + ") " + m);
			if (!mThrowsNoElement && !mThrowsIllegal && !mThrowsIndex && !mThrowsUnsupp) ensure(m.contains(KEY2OBJ(T)) ==  t.contains(KEY2OBJ(T)), "Error (" + seed + "): divergence between t and m (standard method) " + m);
		}

		/* Now we add and remove random data in m and t, checking that the result is the same. */

		for(int i=0; i<20*n;  i++) {
			KEY_TYPE T = genKey();

			mThrowsIndex = tThrowsIndex = mThrowsNoElement = tThrowsNoElement = mThrowsIllegal = tThrowsIllegal = mThrowsUnsupp = tThrowsUnsupp = false;

			try {
				rm = m.add(KEY2OBJ(T));
			}
			catch (java.util.NoSuchElementException e) { mThrowsNoElement = true; }
			catch (IllegalArgumentException e) { mThrowsIllegal = true; }
			catch (IndexOutOfBoundsException e) { mThrowsIndex = true; }
			catch (UnsupportedOperationException e) { mThrowsUnsupp = true; }

			try {
				rt = t.add(KEY2OBJ(T));
			}
			catch (java.util.NoSuchElementException e) { tThrowsNoElement = true; }
			catch (IllegalArgumentException e) { tThrowsIllegal = true; }
			catch (IndexOutOfBoundsException e) { tThrowsIndex = true; }
			catch (UnsupportedOperationException e) { tThrowsUnsupp = true; }

			ensure(mThrowsNoElement == tThrowsNoElement, "Error (" + seed + "): add() divergence in java.util.NoSuchElementException for " + T + " (" + mThrowsNoElement + ", " + tThrowsNoElement + ") " + m);
			ensure(mThrowsIllegal == tThrowsIllegal, "Error (" + seed + "): add() divergence in IllegalArgumentException for " + T + " (" + mThrowsIllegal + ", " + tThrowsIllegal + ") " + m);
			ensure(mThrowsIndex == tThrowsIndex, "Error (" + seed + "): add() divergence in IndexOutOfBoundsException for " + T + " (" + mThrowsIndex + ", " + tThrowsIndex + ") " + m);
			ensure(mThrowsUnsupp == tThrowsUnsupp, "Error (" + seed + "): add() divergence in UnsupportedOperationException for " + T + " (" + mThrowsUnsupp + ", " + tThrowsUnsupp + ") " + m);
			if (!mThrowsNoElement && !mThrowsIllegal && !mThrowsIndex && !mThrowsUnsupp) ensure(rm == rt, "Error (" + seed + "): divergence in add() between t and m " + m);

			T = genKey();

			mThrowsIndex = tThrowsIndex = mThrowsNoElement = tThrowsNoElement = mThrowsIllegal = tThrowsIllegal = mThrowsUnsupp = tThrowsUnsupp = false;

			try {
				rm = m.remove(KEY2OBJ(T));
			}
			catch (java.util.NoSuchElementException e) { mThrowsNoElement = true; }
			catch (IllegalArgumentException e) { mThrowsIllegal = true; }
			catch (IndexOutOfBoundsException e) { mThrowsIndex = true; }
			catch (UnsupportedOperationException e) { mThrowsUnsupp = true; }

			try {
				rt = t.remove(KEY2OBJ(T));
			}
			catch (java.util.NoSuchElementException e) { tThrowsNoElement = true; }
			catch (IllegalArgumentException e) { tThrowsIllegal = true; }
			catch (IndexOutOfBoundsException e) { tThrowsIndex = true; }
			catch (UnsupportedOperationException e) { tThrowsUnsupp = true; }

			if (! KEY_EQUALS(T, k) && mThrowsUnsupp && ! tThrowsUnsupp) mThrowsUnsupp = false; // Stupid bug in Collections.singleton()

			ensure(mThrowsNoElement == tThrowsNoElement, "Error (" + seed + "): remove() divergence in java.util.NoSuchElementException for " + T + " (" + mThrowsNoElement + ", " + tThrowsNoElement + ") " + m);
			ensure(mThrowsIllegal == tThrowsIllegal, "Error (" + seed + "): remove() divergence in IllegalArgumentException for " + T + " (" + mThrowsIllegal + ", " + tThrowsIllegal + ") " + m);
			ensure(mThrowsIndex == tThrowsIndex, "Error (" + seed + "): remove() divergence in IndexOutOfBoundsException for " + T + " (" + mThrowsIndex + ", " + tThrowsIndex + ") " + m);
			ensure(mThrowsUnsupp == tThrowsUnsupp, "Error (" + seed + "): remove() divergence in UnsupportedOperationException for " + T + " (" + mThrowsUnsupp + ", " + tThrowsUnsupp + ") " + m);
			if (!mThrowsNoElement && !mThrowsIllegal && !mThrowsIndex && !mThrowsUnsupp) ensure(rm == rt, "Error (" + seed + "): divergence in remove() between t and m " + m);
		}

		ensure(m.equals(t), "Error (" + seed + "): ! m.equals(t) after removal " + m);
		ensure(t.equals(m), "Error (" + seed + "): ! t.equals(m) after removal " + m);

		/* Now we add and remove random collections in m and t, checking that the result is the same. */

		for(int i=0; i<20*n;  i++) {
			KEY_TYPE T = genKey();

			mThrowsIndex = tThrowsIndex = mThrowsNoElement = tThrowsNoElement = mThrowsIllegal = tThrowsIllegal = mThrowsUnsupp = tThrowsUnsupp = false;

			try {
				rm = m.addAll(java.util.Collections.singleton(KEY2OBJ(T)));
			}
			catch (java.util.NoSuchElementException e) { mThrowsNoElement = true; }
			catch (IllegalArgumentException e) { mThrowsIllegal = true; }
			catch (IndexOutOfBoundsException e) { mThrowsIndex = true; }
			catch (UnsupportedOperationException e) { mThrowsUnsupp = true; }

			try {
				rt = t.addAll(java.util.Collections.singleton(KEY2OBJ(T)));
			}
			catch (java.util.NoSuchElementException e) { tThrowsNoElement = true; }
			catch (IllegalArgumentException e) { tThrowsIllegal = true; }
			catch (IndexOutOfBoundsException e) { tThrowsIndex = true; }
			catch (UnsupportedOperationException e) { tThrowsUnsupp = true; }

			ensure(mThrowsNoElement == tThrowsNoElement, "Error (" + seed + "): addAll() divergence in java.util.NoSuchElementException for " + T + " (" + mThrowsNoElement + ", " + tThrowsNoElement + ") " + m);
			ensure(mThrowsIllegal == tThrowsIllegal, "Error (" + seed + "): addAll() divergence in IllegalArgumentException for " + T + " (" + mThrowsIllegal + ", " + tThrowsIllegal + ") " + m);
			ensure(mThrowsIndex == tThrowsIndex, "Error (" + seed + "): addAll() divergence in IndexOutOfBoundsException for " + T + " (" + mThrowsIndex + ", " + tThrowsIndex + ") " + m);
			ensure(mThrowsUnsupp == tThrowsUnsupp, "Error (" + seed + "): addAll() divergence in UnsupportedOperationException for " + T + " (" + mThrowsUnsupp + ", " + tThrowsUnsupp + ") " + m);
			if (!mThrowsNoElement && !mThrowsIllegal && !mThrowsIndex && !mThrowsUnsupp) ensure(rm == rt, "Error (" + seed + "): divergence in addAll() between t and m " + m);

			T = genKey();

			mThrowsIndex = tThrowsIndex = mThrowsNoElement = tThrowsNoElement = mThrowsIllegal = tThrowsIllegal = mThrowsUnsupp = tThrowsUnsupp = false;

			try {
				rm = m.removeAll(java.util.Collections.singleton(KEY2OBJ(T)));
			}
			catch (java.util.NoSuchElementException e) { mThrowsNoElement = true; }
			catch (IllegalArgumentException e) { mThrowsIllegal = true; }
			catch (IndexOutOfBoundsException e) { mThrowsIndex = true; }
			catch (UnsupportedOperationException e) { mThrowsUnsupp = true; }

			try {
				rt = t.removeAll(java.util.Collections.singleton(KEY2OBJ(T)));
			}
			catch (java.util.NoSuchElementException e) { tThrowsNoElement = true; }
			catch (IllegalArgumentException e) { tThrowsIllegal = true; }
			catch (IndexOutOfBoundsException e) { tThrowsIndex = true; }
			catch (UnsupportedOperationException e) { tThrowsUnsupp = true; }

			if (! KEY_EQUALS(T, k) && mThrowsUnsupp && ! tThrowsUnsupp) mThrowsUnsupp = false; // Stupid bug in Collections.singleton()

			ensure(mThrowsNoElement == tThrowsNoElement, "Error (" + seed + "): removeAll() divergence in java.util.NoSuchElementException for " + T + " (" + mThrowsNoElement + ", " + tThrowsNoElement + ") " + m);
			ensure(mThrowsIllegal == tThrowsIllegal, "Error (" + seed + "): removeAll() divergence in IllegalArgumentException for " + T + " (" + mThrowsIllegal + ", " + tThrowsIllegal + ") " + m);
			ensure(mThrowsIndex == tThrowsIndex, "Error (" + seed + "): removeAll() divergence in IndexOutOfBoundsException for " + T + " (" + mThrowsIndex + ", " + tThrowsIndex + ") " + m);
			ensure(mThrowsUnsupp == tThrowsUnsupp, "Error (" + seed + "): removeAll() divergence in UnsupportedOperationException for " + T + " (" + mThrowsUnsupp + ", " + tThrowsUnsupp + ") " + m);
			if (!mThrowsNoElement && !mThrowsIllegal && !mThrowsIndex && !mThrowsUnsupp) ensure(rm == rt, "Error (" + seed + "): divergence in removeAll() between t and m " + m);
		}

		ensure(m.equals(t), "Error (" + seed + "): ! m.equals(t) after set removal " + m);
		ensure(t.equals(m), "Error (" + seed + "): ! t.equals(m) after set removal " + m);

		/* Now we check that m actually holds the same data. */

		for(java.util.Iterator i=t.iterator(); i.hasNext();) {
			ensure(m.contains(i.next()), "Error (" + seed + "): m and t differ on an entry after removal (iterating on t)");
		}

		/* Now we check that m actually holds that data, but iterating on m. */

		for(java.util.Iterator i=m.iterator(); i.hasNext();) {
			ensure(t.contains(i.next()), "Error (" + seed + "): m and t differ on an entry after removal (iterating on m)");
		}

		if (m instanceof Singleton) {
			ensure(m.equals(((Singleton)m).clone()), "Error (" + seed + "): m does not equal m.clone()");
			ensure(((Singleton)m).clone().equals(m), "Error (" + seed + "): m.clone() does not equal m");
		}

		int h = m.hashCode();

		/* Now we save and read m. */

		SET m2 = null;

		{
			java.io.File ff = new java.io.File("it.unimi.dsi.fastutil.test." + m.getClass().getSimpleName() + "." + n);
			java.io.OutputStream os = new java.io.FileOutputStream(ff);
			java.io.ObjectOutputStream oos = new java.io.ObjectOutputStream(os);

			oos.writeObject(m);
			oos.close();

			java.io.InputStream is = new java.io.FileInputStream(ff);
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(is);

			m2 = (SET)ois.readObject();
			ois.close();
			ff.delete();
		}

#if ! KEY_CLASS_Reference

		ensure(m2.hashCode() == h, "Error (" + seed + "): hashCode() changed after save/read");

		/* Now we check that m2 actually holds that data. */

		ensure(m2.equals(t), "Error (" + seed + "): ! m2.equals(t) after save/read");
		ensure(t.equals(m2), "Error (" + seed + "): ! t.equals(m2) after save/read");
#endif

		System.out.println("Test OK");
		return;
	}

	private static long seed = System.currentTimeMillis();
	private static java.util.Random r = new java.util.Random(seed);

	private static java.text.NumberFormat format = new java.text.DecimalFormat("#,###.00");
	private static java.text.FieldPosition fp = new java.text.FieldPosition(0);

	private static String format(double d) {
		StringBuffer s = new StringBuffer();
		return format.format(d, s, fp).toString();
	}

	private static void fatal(String msg) {
		throw new AssertionError(msg);
	}

	private static void ensure(boolean cond, String msg) {
		if (cond) return;
		fatal(msg);
	}

	/** This method expects as first argument a lower-cased type (e.g., "int"),
	 * and as second optional argument a seed. */

	public static void main(String arg[]) throws Exception {
		if (arg.length > 1) r = new java.util.Random(seed = Long.parseLong(arg[1]));

		try {
			test();
		} catch(Throwable e) {
			e.printStackTrace(System.err);
			System.err.println("seed: " + seed);
			throw e;
		}
	}

#endif

}
